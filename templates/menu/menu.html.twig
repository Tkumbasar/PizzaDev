
{% extends 'base.html.twig' %}

{% block title %}Menus{% endblock %}

{% block body %}
<div class="container mx-auto mt-4 px-4">

    <h1 class="text-3xl font-bold mb-6 text-center">Menus</h1>

    <!-- Grid Layout for Menus -->
    <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3 justify-center">
        {% for menu in menus %}
            <div class="max-w-sm bg-white border border-gray-200 rounded-lg shadow-md dark:bg-gray-800 dark:border-gray-700 flex flex-col p-4">
                <a href="#">
                    <img class="rounded-t-lg w-full h-48 object-cover mb-4" src="/docs/images/blog/image-1.jpg" alt="Menu Image" />
                </a>
                <div class="flex flex-col flex-grow">
                    <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white text-center">{{ menu.title }}</h5>

                    <p class="mb-4 font-normal text-gray-700 dark:text-gray-400 text-center">{{ menu.description }}</p>

                    <!-- Display Products -->
                    <h6 class="text-lg font-medium mb-2">Produits</h6>
                    <ul class="list-disc list-inside mb-4 px-4">
                        {% set product_count = 0 %}
                        {% for product in menu.products %}
                            {% if product_count < 3 %}
                                <li>{{ product.name }}</li>
                                {% set product_count = product_count + 1 %}
                            {% endif %}
                        {% else %}
                            {% if product_count == 0 %}
                                <li>Aucun produit</li>
                            {% endif %}
                        {% endfor %}
                    </ul>

                    <!-- Display Categories -->
                    <h6 class="text-lg font-medium mb-2">Catégories</h6>
                    <ul class="list-disc list-inside mb-4 px-4">
                        {% set category_count = 0 %}
                        {% for product in menu.products %}
                            {% if product.category is not null and category_count < 3 %}
                                <li>{{ product.category.name }}</li>
                                {% set category_count = category_count + 1 %}
                            {% endif %}
                        {% endfor %}
                        {% if category_count == 0 %}
                            <li>Aucune catégorie</li>
                        {% endif %}
                    </ul>
                </div>

                <!-- Buttons for Buying and Adding Comment -->
                <div class="flex justify-between items-center mt-auto border-t border-gray-200 dark:border-gray-700 pt-4">
                    <button type="button" class="inline-flex items-center px-4 py-2 text-sm font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                        Acheter
                        <svg class="rtl:rotate-180 w-3.5 h-3.5 ms-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9"/>
                        </svg>
                    </button>

                    <button type="button" class="inline-flex items-center px-4 py-2 text-sm font-medium text-center text-white bg-green-700 rounded-lg hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-green-300 dark:bg-green-600 dark:hover:bg-green-700 dark:focus:ring-green-800" data-modal-target="commentModal{{ menu.id }}" data-modal-toggle="commentModal{{ menu.id }}">
                        Ajouter un commentaire
                        <svg class="rtl:rotate-180 w-3.5 h-3.5 ms-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9"/>
                        </svg>
                    </button>
                </div>
            </div>

            <!-- Comment Modal -->
            <div id="commentModal{{ menu.id }}" tabindex="-1" aria-hidden="true" class="fixed inset-0 z-50 flex items-center justify-center bg-gray-800 bg-opacity-50 hidden">
                <div class="relative bg-white rounded-lg shadow-lg w-full max-w-lg">
                    <button type="button" class="absolute top-3 right-3 text-gray-400 hover:text-gray-900" data-modal-hide="commentModal{{ menu.id }}">
                        <svg aria-hidden="true" class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                        <span class="sr-only">Close modal</span>
                    </button>
                    <div class="p-6">
                        <h3 class="text-lg font-medium mb-4">Ajouter un commentaire pour {{ menu.title }}</h3>

                        <!-- Display existing comments -->
                        <!-- Affichage des commentaires pour chaque menu -->
                {% if comments_by_menu[menu.id] is defined and comments_by_menu[menu.id] is not empty %}
                <ul>
                    {% for comment in comments_by_menu[menu.id] %}
                        {% if comment is not null %}
                            <li id="comment-{{ comment.id }}">
                                {% if comment.customer is not null %}
                                    <strong>{{ comment.customer.name }} :</strong> {{ comment.comment }}
                                    {% if app.user and comment.customer.id == app.user.customer.id %}
                                        <button class="btn btn-danger btn-sm mt-2" data-comment-id="{{ comment.id }}" data-menu-id="{{ menu.id }}" onclick="removeComment(this)">Supprimer</button>
                                    {% endif %}
                                {% else %}
                                    <em>Aucun client associé</em>
                                {% endif %}
                            </li>
                        {% endif %}
                    {% endfor %}
                </ul>
            {% else %}
                <p>Aucun commentaire disponible pour ce menu.</p>
            {% endif %}

                        <!-- Comment Form -->
                        <form id="commentForm{{ menu.id }}" data-menu-id="{{ menu.id }}" onsubmit="addComment(event)">
                            <div class="mb-4">
                                <textarea name="comment_text" rows="4" class="form-textarea w-full" placeholder="Écrivez votre commentaire..."></textarea>
                            </div>
                            <div id="commentMessage{{ menu.id }}" class="mb-4 text-center"></div>
                            <button type="submit" class="btn btn-primary w-full">Ajouter un commentaire</button>
                        </form>
                    </div>
                </div>
            </div>
        {% endfor %}
    </div>

</div>

<script>
    // Show the modal
    document.querySelectorAll('[data-modal-toggle]').forEach(button => {
        button.addEventListener('click', () => {
            const modalId = button.getAttribute('data-modal-target');
            document.getElementById(modalId).classList.remove('hidden');
        });
    });

    // Hide the modal
    document.querySelectorAll('[data-modal-hide]').forEach(button => {
        button.addEventListener('click', () => {
            const modalId = button.getAttribute('data-modal-hide');
            document.getElementById(modalId).classList.add('hidden');
        });
    });

    function addComment(event) {
        event.preventDefault();

        const form = event.target;
        const menuId = form.getAttribute('data-menu-id');
        const formData = new FormData(form);
        const messageDiv = document.getElementById(`commentMessage${menuId}`);

        fetch(`{{ path('comment_add', {'menuId': '__MENU_ID__'}) }}`.replace('__MENU_ID__', menuId), {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Update comments list
                const commentsList = document.getElementById(`commentsList${menuId}`);
                const newComment = document.createElement('li');
                newComment.id = `comment-${data.comment.id}`;
                newComment.innerHTML = `<strong>${data.comment.customerName} :</strong> ${data.comment.comment} <button class="btn btn-danger btn-sm mt-2" data-comment-id="${data.comment.id}" data-menu-id="${menuId}" onclick="removeComment(this)">Supprimer</button>`;
                commentsList.appendChild(newComment);

                // Reset the form and show success message
                form.reset();
                messageDiv.textContent = 'Commentaire ajouté avec succès !';
                messageDiv.classList.remove('text-red-500');
                messageDiv.classList.add('text-green-500');
                setTimeout(() => {
                    messageDiv.textContent = '';
                }, 3000);
            } else {
                messageDiv.textContent = data.message || 'Erreur lors de l\'ajout du commentaire.';
                messageDiv.classList.remove('text-green-500');
                messageDiv.classList.add('text-red-500');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            messageDiv.textContent = 'Erreur lors de l\'ajout du commentaire.';
            messageDiv.classList.remove('text-green-500');
            messageDiv.classList.add('text-red-500');
        });
    }

    // Function to handle comment removal via AJAX
    function removeComment(button) {
        const commentId = button.getAttribute('data-comment-id');
        const menuId = button.getAttribute('data-menu-id');

        fetch(`{{ path('comment_remove', {'commentId': '__COMMENT_ID__'}) }}`.replace('__COMMENT_ID__', commentId), {
            method: 'POST',
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Remove the comment from the list
                const commentElement = document.getElementById(`comment-${commentId}`);
                if (commentElement) {
                    commentElement.remove();
                }
            } else {
                console.error('Error:', data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
    }
</script>
{% endblock %}